
using UnityEngine;
using UnityEditor;
using UnityEditorInternal;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Extensions;
using Modules.Devkit.Project;

namespace Modules.Devkit.Generators
{
    public static class LayersScriptGenerator
    {
        //----- params -----

        private const string ScriptTemplate =
@"
// Generated by LayersScriptGenerator.cs

using System.Collections.Generic;

namespace #NAMESPACE#
{
    public enum Layer
    {
#ENUMS#
    }

    public static class Layers
    {
        public static int ToLayerMask(this Layer value)
        {
            return 1 << (int)value;
        }

        public static int ToLayerMask(this IEnumerable<Layer> values)
        {
            var result = 0;
            foreach (var value in values)
            {
                result |= value.ToLayerMask();
            }
            return result;
        }
    }
}
";

        //----- method -----

        public static void Generate(string scriptPath)
        {
            var projectScriptFolders = ProjectScriptFolders.Instance;

            var enums = new StringBuilder();

            var layers = InternalEditorUtility.layers.Select(c => new { var = ScriptGenerateUtility.RemoveInvalidChars(c), val = LayerMask.NameToLayer(c) }).ToArray();

            for (var i = 0; i < layers.Length ; ++i)
            {
                enums.Append("\t\t").AppendFormat(@"{0} = {1},", layers[i].var, layers[i].val);

                // 最終行は改行しない.
                if (i < layers.Length - 1)
                {
                    enums.AppendLine();
                }
            }

            var script = ScriptTemplate;

            script = Regex.Replace(script, "#NAMESPACE#", projectScriptFolders.ScriptConstantsNamespace);
            script = Regex.Replace(script, "#ENUMS#", enums.ToString());

            script = script.FixLineEnd();
            
            ScriptGenerateUtility.GenerateScript(scriptPath, @"Layers.cs", script);
        }
    }
}
