
using UnityEditor;
using System.IO;
using System.Linq;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using Extensions;

namespace Modules.Devkit.Generators
{
    public static class ScenesScriptGenerator
    {
        private const string ScriptTemplate =
@"
// Generated by ScenesScriptGenerator.cs

using System.Collections.Generic;

namespace Constants
{
    public enum Scenes
    {
#ENUMS#
    }

    public static class SceneDefinition
    {
        public static readonly Dictionary<Scenes, string> ScenePaths = new Dictionary<Scenes, string>
        {
#CONTENTS#
        };
    }
}
";
        public static void Generate(string[] sceneFolders, string scriptPath)
        {
            var enums = new StringBuilder();
            var contents = new StringBuilder();

            // 最も一致率の高いパスから検索する為長さで並べ替え.
            var sceneFolderPaths = sceneFolders.OrderBy(x => x.Length);

            var scenes = EditorBuildSettings.scenes;

            for (var i = 0; i < scenes.Length; ++i)
            {
                var scene = scenes[i];

                if (!scene.enabled) { continue; }

                var path = PathUtility.ConvertPathSeparator(scene.path);

                var enumName = string.Empty;

                foreach (var item in sceneFolderPaths)
                {
                    var sceneFolderPath = item;

                    // フォルダで'/'が付いていない時.
                    if (AssetDatabase.IsValidFolder(sceneFolderPath) && sceneFolderPath.LastOrDefault() != PathUtility.PathSeparator)
                    {
                        sceneFolderPath = sceneFolderPath + PathUtility.PathSeparator;
                    }

                    // シーンフォルダまでのパスを除外したEnum名を作成.
                    if (path.StartsWith(sceneFolderPath))
                    {
                        var scenePath = path.SafeSubstring(sceneFolderPath.Length).Replace(PathUtility.PathSeparator, '_');

                        enumName = Path.GetFileNameWithoutExtension(scenePath);

                        break;
                    }
                }

                if (string.IsNullOrEmpty(enumName))
                {
                    enumName = Path.GetFileNameWithoutExtension(path);
                }

                enums.Append("\t\t").AppendFormat("{0},", enumName);
                contents.Append("\t\t\t").AppendFormat("{{ Scenes.{0}, \"{1}\" }},", enumName, path);

                // 最終行は改行しない.
                if (i < scenes.Length - 1)
                {
                    enums.AppendLine();
                    contents.AppendLine();
                }
            }

            var script = ScriptTemplate;

            script = Regex.Replace(script, "#ENUMS#", enums.ToString());
            script = Regex.Replace(script, "#CONTENTS#", contents.ToString());

            script = script.FixLineEnd();
            
            ScriptGenerateUtility.GenerateScript(scriptPath, @"Scenes.cs", script);
        }
    }
}
