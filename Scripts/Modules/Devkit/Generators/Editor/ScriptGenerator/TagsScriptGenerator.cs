﻿
using System.Text;
using System.Text.RegularExpressions;
using UnityEditorInternal;
using Extensions;

namespace Modules.Devkit.Generators
{
    public static class TagsScriptGenerator
    {
        //----- params -----

        private const string ScriptTemplate =
@"
// Generated by TagsScriptGenerator.cs

using System.Collections.Generic;

namespace Constants
{
	public static class Tags
	{

#FIELDS#

		public static IEnumerable<string> All
		{
			get { return all; }
		}

		private static readonly List<string> all = new List<string>
		{
#ALL#
		};
	}
}
";
        //----- field -----

        //----- property -----

        //----- method -----

        public static void Generate(string scriptPath)
        {
            var fields = new StringBuilder();
            var all = new StringBuilder();

            var tags = InternalEditorUtility.tags;

            for (var i = 0; i < tags.Length; ++i)
            {
                fields.Append("\t\t").AppendFormat("public const string {0} = \"{0}\";", tags[i]);
                all.Append("\t\t\t").AppendFormat("{0},", tags[i]);

                // 最終行は改行しない.
                if (i < tags.Length - 1)
                {
                    fields.AppendLine();
                    all.AppendLine();
                }
            }

            var script = ScriptTemplate;

            script = Regex.Replace(script, "#FIELDS#", fields.ToString());
            script = Regex.Replace(script, "#ALL#", all.ToString());

            script = script.FixLineEnd();
            
            ScriptGenerateUtility.GenerateScript(scriptPath, @"Tags.cs", script);
        }
    }
}
