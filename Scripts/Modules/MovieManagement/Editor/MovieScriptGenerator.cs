
#if ENABLE_CRIWARE_SOFDEC

using UnityEditor;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Extensions;
using Modules.Devkit.Generators;
using Modules.CriWare;

namespace Modules.MovieManagement.Editor
{
    public static class MovieScriptGenerator
    {
        //----- params -----

        private const string ScriptTemplate =
@"
// Generated by MovieScriptGenerator.cs

#if ENABLE_CRIWARE_SOFDEC

using System.Collections.Generic;
using Extensions;

namespace Modules.MovieManagement
{
    public static class Movies
	{
        public enum Mana
        {
@ENUMS
        }

        private static Dictionary<Mana, ManaInfo> internalMovies = new Dictionary<Mana, ManaInfo>()
        {
@CONTENTS
        };

        public static ManaInfo GetManaInfo(Mana mana)
        {
            var info = internalMovies.GetValueOrDefault(mana);
            var path = PathUtility.Combine(PathUtility.GetProjectFolderPath(), info.UsmPath);
            return new ManaInfo(path);
        }
    }
}

#endif
";

        private const string EnumTemplate = @"{0},";
        private const string ContentsTemplate = @"{{ Mana.{0}, new ManaInfo(""{1}"") }},";

        //----- field -----

        //----- property -----

        //----- method -----

        public static void Generate(string scriptPath, string rootFolderPath)
        {
            var infos = LoadUsmInfo(rootFolderPath);

            var enums = new StringBuilder();
            var contents = new StringBuilder();

            for (var i = 0; i < infos.Length; i++)
            {
                var info = infos[i];

                var assetPath = info.Usm.Replace(rootFolderPath + PathUtility.PathSeparator, string.Empty);
                var enumName = ScriptGenerateUtility.GetCSharpName(PathUtility.GetPathWithoutExtension(assetPath), false);

                enums.Append("\t\t\t").AppendFormat(EnumTemplate, enumName);
                contents.Append("\t\t\t").AppendFormat(ContentsTemplate, enumName, info.UsmPath);

                if (i < infos.Length - 1)
                {
                    enums.AppendLine();
                    contents.AppendLine();
                }
            }

            var script = ScriptTemplate;

            script = Regex.Replace(script, "@ENUMS", enums.ToString());
            script = Regex.Replace(script, "@CONTENTS", contents.ToString());

            var folderPath = PathUtility.Combine(scriptPath, @"Constants");
            ScriptGenerateUtility.GenerateScript(folderPath, @"Movies.cs", script);
        }

        private static ManaInfo[] LoadUsmInfo(string path)
        {
            var result = new List<ManaInfo>();

            var guids = AssetDatabase.FindAssets(string.Empty, new string[] { path });

            var usmAssets = guids
                .Select(x => AssetDatabase.GUIDToAssetPath(x))
                .Where(x => Path.GetExtension(x) == CriAssetDefinition.UsmExtension)
                .Select(x => AssetDatabase.LoadMainAssetAtPath(x))
                .ToArray();

            foreach (var usmAsset in usmAssets)
            {
                var assetPath = AssetDatabase.GetAssetPath(usmAsset);

                result.Add(new ManaInfo(assetPath));
            }

            return result.ToArray();
        }
    }
}

#endif
