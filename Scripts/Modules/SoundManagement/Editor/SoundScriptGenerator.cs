
#if ENABLE_CRIWARE_ADX

using UnityEditor;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Extensions;
using Modules.Devkit.Generators;
using Modules.CriWare;
using Modules.CriWare.Editor;
using Modules.Devkit.Project;

namespace Modules.SoundManagement.Editor
{
    public static class SoundScriptGenerator
    {
        //----- params -----

        private const string ScriptTemplate =
@"
// Generated by SoundScriptGenerator.cs

#if ENABLE_CRIWARE_ADX

using System;
using System.Collections.Generic;
using Extensions;

namespace Modules.SoundManagement
{
    public static class Sounds
	{
        public enum Cue
        {
@ENUMS
        }

        private static Dictionary<Cue, Tuple<string, string, string>> internalSounds = new Dictionary<Cue, Tuple<string, string, string>>()
        {
@CONTENTS
        };

        public static CueInfo GetCueInfo(Cue cue)
        {
            var fileDirectory = string.Empty;

            #if UNITY_EDITOR

            var editorStreamingAssetsFolderPath = @EDITOR_STREAMING_ASSETS_FOLDER_PATH;

            fileDirectory = UnityPathUtility.ConvertAssetPathToFullPath(editorStreamingAssetsFolderPath);

            #else

            fileDirectory = Application.streamingAssetsPath;

            #endif

            var info = internalSounds.GetValueOrDefault(cue);

            var filePath = PathUtility.Combine(fileDirectory, info.Item1);

            return new CueInfo(filePath, info.Item1, info.Item2, info.Item3);
        }
    }
}

#endif
";
        private const string EnumTemplate = @"{0},";
        private const string SummaryTemplate = @"/// <summary> {0} </summary>";
        private const string ContentsTemplate = @"{{ Cue.{0}, Tuple.Create(""{1}"", ""{2}"", ""{3}"") }},";

        //----- field -----

        //----- property -----

        //----- method -----

        public static void Generate(string scriptPath, string assetFolderPath, string rootFolderName)
        {
            var projectFolders = ProjectFolders.Instance;

            var infos = LoadAcbInfo(assetFolderPath);

            var enums = new StringBuilder();
            var contents = new StringBuilder();

            for (var i = 0; i < infos.Length; i++)
            {
                var info = infos[i];

                if (!string.IsNullOrEmpty(info.Summary))
                {
                    enums.Append("\t\t\t").AppendFormat(SummaryTemplate, info.Summary).AppendLine();
                }

                var assetPath = info.CueSheet.Replace(assetFolderPath + PathUtility.PathSeparator, string.Empty);
                var enumName = ScriptGenerateUtility.GetCSharpName(assetPath) + "_" + ScriptGenerateUtility.GetCSharpName(info.Cue, false);

                var cueSheetPath = PathUtility.Combine(rootFolderName, info.CueSheet);

                enums.Append("\t\t\t").AppendFormat(EnumTemplate, enumName);
                contents.Append("\t\t\t").AppendFormat(ContentsTemplate, enumName, cueSheetPath, info.Cue, info.Summary);

                if (i < infos.Length - 1)
                {
                    enums.AppendLine();
                    contents.AppendLine();
                }
            }

            var editorStreamingAssetsFolderPath = projectFolders.StreamingAssetPath;

            var script = ScriptTemplate;

            script = Regex.Replace(script, "@ENUMS", enums.ToString());
            script = Regex.Replace(script, "@CONTENTS", contents.ToString());
            script = Regex.Replace(script, "@EDITOR_STREAMING_ASSETS_FOLDER_PATH", @"""" + editorStreamingAssetsFolderPath + @"""");

            ScriptGenerateUtility.GenerateScript(scriptPath, @"Sounds.cs", script);
        }

        private static CueInfo[] LoadAcbInfo(string path)
        {
            var result = new List<CueInfo>();

            CriForceInitializer.Initialize();

            var guids = AssetDatabase.FindAssets(string.Empty, new string[] { path });

            var acbAssets = guids
                .Select(x => AssetDatabase.GUIDToAssetPath(x))
                .Where(x => Path.GetExtension(x) == CriAssetDefinition.AcbExtension)
                .Select(x => AssetDatabase.LoadMainAssetAtPath(x))
                .ToArray();

            foreach (var acbAsset in acbAssets)
            {
                // 指定したACBファイル名(キューシート名)を指定してキュー情報を取得.
                var assetPath = AssetDatabase.GetAssetPath(acbAsset);
                var fullPath = UnityPathUtility.GetProjectFolderPath() + assetPath;
                var acb = CriAtomExAcb.LoadAcbFile(null, fullPath, "");

                if (acb != null)
                {
                    var cueInfos = acb.GetCueInfoList().ToArray();

                    foreach (var cueInfo in cueInfos)
                    {
                        var acbPath = assetPath.Replace(path + PathUtility.PathSeparator, string.Empty);

                        acbPath = PathUtility.GetPathWithoutExtension(acbPath);

                        result.Add(new CueInfo(string.Empty, acbPath, cueInfo.name, cueInfo.userData));
                    }

                    acb.Dispose();
                }
            }

            return result.ToArray();
        }
    }
}

#endif
