
using System.Text;
using System.Text.RegularExpressions;
using Extensions;
using Modules.Devkit.Generators;

namespace Modules.TextData.Editor
{
    public sealed class TextDataScriptGenerator
    {
        //----- params -----

        public const string TextDataScriptFileName = @"TextData.definition.cs";

        private const string TextDataScriptTemplate =
@"

// Generated by TextDataScriptGenerator.cs

using System;
using System.Collections.Generic;
using System.Linq;

namespace Modules.TextData
{
    public partial class TextData
    {
        //----- params -----
    
        private sealed class CategoryDefinition
        {
            public CategoryType Category { get; private set; }

            public Type EnumType { get; private set; }

            public IReadOnlyDictionary<Enum, string> Table { get; private set; }

            public string Guid { get; private set; }

            public CategoryDefinition(CategoryType category, Type enumType, IReadOnlyDictionary<Enum, string> table, string guid)
            {
                Category = category;
                EnumType = enumType;
                Table = table;
                Guid = guid;
            }
        }

        //----- field -----

        private IReadOnlyList<CategoryDefinition> categoryDefinition = null;

        //----- property -----

        //----- method -----

        protected override void BuildGenerateContents()
        {
            categoryDefinition = new CategoryDefinition[]
            {
#CATEGORY_DEFINITION_ITEMS#
            };
        }

        public override string FindTextGuid(Enum textType)
        {
            var table = categoryDefinition.FirstOrDefault(x => x.EnumType == textType.GetType());

            if (table == null) { return null; }

            var item = table.Table.FirstOrDefault(x => x.Key.Equals(textType));

            if (item.Equals(default(KeyValuePair<Enum, string>))) { return null; }

            return item.Value;
        }

        private static string GetTextInternal(Enum textType)
        {
            if (Instance.Texts == null) { return null; }

            var textGuid = Instance.FindTextGuid(textType);

            if (string.IsNullOrEmpty(textGuid)) { return null; }

            return Instance.FindTextByTextGuid(textGuid);
        }

#GETTEXT_METHODS#
    }
}
";

        private const string CategoryDefinitionTemplate = @"new CategoryDefinition(CategoryType.{0}, typeof(TextData.{0}), _{0}Table, ""{1}""),";

        private const string GetMethodTemplate = @"public static string Get(TextData.{0} textType){{ return GetTextInternal(textType); }}";

        private const string FormatMethodTemplate = @"public static string Format(TextData.{0} textType, params object[] args){{ return string.Format(Get(textType), args); }}";

        //----- field -----

        //----- property -----

        //----- method -----

        public static void Generate(SheetData[] sheets, string scriptFolderPath)
        {
            var categorys = new StringBuilder();
            var methods = new StringBuilder();

            for (var i = 0; i < sheets.Length; i++)
            {
                var sheet = sheets[i];

                var sheetGuid = TextDataGuid.Get(sheet.sheetName);

                categorys.Append("\t\t\t\t").AppendFormat(CategoryDefinitionTemplate, sheet.sheetName, sheetGuid);

                methods.Append("\t\t").AppendFormat(GetMethodTemplate, sheet.sheetName).AppendLine();

                methods.Append("\t\t").AppendFormat(FormatMethodTemplate, sheet.sheetName);

                // 最終行は改行しない.
                if (i < sheets.Length - 1)
                {
                    categorys.AppendLine();

                    methods.AppendLine().AppendLine();
                }
            }

            var script = TextDataScriptTemplate;

            script = Regex.Replace(script, "#CATEGORY_DEFINITION_ITEMS#", categorys.ToString());
            script = Regex.Replace(script, "#GETTEXT_METHODS#", methods.ToString());

            script = script.FixLineEnd();
            
            ScriptGenerateUtility.GenerateScript(scriptFolderPath, TextDataScriptFileName, script);            
        }
    }
}
